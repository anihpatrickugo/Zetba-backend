"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.0.9.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
import datetime
import environ

env = environ.Env(
    DEBUG=(bool, True)
)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-z+i4b&ay4-%rx$ml7)604efg7wr!$997siy(n9!ukp&#31szvr"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

CSRF_TRUSTED_ORIGINS = [
    "https://zetba.onrender.com"
]


# Application definition

INSTALLED_APPS = [
    "daphne",  # must be the first
    "channels",

    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    "users.apps.UsersConfig",
    "events.apps.EventsConfig",

    'corsheaders',

    'rest_framework',
    'rest_framework.authtoken',

    'rest_framework_simplejwt',

    'dj_rest_auth',
    
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'dj_rest_auth.registration',
    'django_rest_passwordreset',

    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

    'drf_spectacular',
    "phonenumber_field",
    'cloudinary_storage', # Must be before cloudinary
    'cloudinary',
    'algoliasearch_django',

]

CORS_ALLOW_ALL_ORIGINS =True




REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],

    'DEFAULT_AUTHENTICATION_CLASSES': (
        'dj_rest_auth.jwt_auth.JWTCookieAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',

    ),

   'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
   'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
   'PAGE_SIZE': 20
}
REST_AUTH = {
    'USE_JWT': True,
    'USER_DETAILS_SERIALIZER': 'users.serializers.CustomUserDetailsSerializer',
    'OLD_PASSWORD_FIELD_ENABLED': True,
    # **IMPORTANT**: This is the URL your FRONTEND will use!
    'RESET_PASSWORD_URL': 'http://192.168.43.254:8000/user/auth/password/reset/confirm/',
    

}

SIMPLE_JWT = {
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=180),
    'JWT_AUTH_COOKIE': True,
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'Zetba API',
    'DESCRIPTION': 'Your number one ticketing platform',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    # OTHER SETTINGS
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",

    "corsheaders.middleware.CorsMiddleware",

    "allauth.account.middleware.AccountMiddleware"
]

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",



            ],
        },
    },
]

# settings.py

LOGGING = {
    'version': 1,  # Specifies the dictConfig schema version
    'disable_existing_loggers': False,  # Keep existing loggers (e.g., Django's default ones)

    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },

    'handlers': {
        'console': {
            'level': 'INFO',  # Minimum level to log to console
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        # 'file': {
        #     'level': 'DEBUG',  # Minimum level to log to file
        #     'class': 'logging.handlers.RotatingFileHandler',
        #     'filename': '/path/to/your/logs/django_debug.log',  # IMPORTANT: Change this path
        #     'maxBytes': 1024 * 1024 * 5,  # 5 MB
        #     'backupCount': 5,
        #     'formatter': 'verbose',
        # },
        # 'mail_admins': {
        #     'level': 'ERROR',  # Only send emails for ERROR and critical
        #     'class': 'django.utils.log.AdminEmailHandler',
        #      'include_html': True, # Set to True to send HTML emails
        # }
    },

    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True, # Pass messages to parent loggers (e.g., root logger)
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False, # Don't send request errors to the 'django' logger again
        },
        'my_app': { # Custom logger for your application
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False, # Don't pass to Django's root logger if you want to handle it separately
        },
        '': {  # Root logger - catches anything not caught by specific loggers
            'handlers': ['console'],
            'level': 'WARNING',
        }
    },
}

ROOT_URLCONF = "core.urls"

WSGI_APPLICATION = "core.wsgi.application"
ASGI_APPLICATION = "core.asgi.application"

# Django Channels
# Adding Django Channel Layers

CHANNEL_LAYERS = {
   "default": {
       "BACKEND": "channels_redis.core.RedisChannelLayer",
       "CONFIG": {
           "hosts": ["redis://red-d14mv063jp1c73bjhd8g:6379"]  # Default Redis host and port here
       }
   }
}


#
# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels.layers.InMemoryChannelLayer",
#     },
# }

# End Django Channels


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#database
#
# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': env('DB_NAME'),
        'USER': env('DB_USER'),
        'PASSWORD': env('DB_PASSWORD'),
        'HOST': env('DB_HOST'), # Or your database server's IP address
        'PORT': env('DB_PORT'), # Default MySQL port is 3306
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4', # Ensure UTF-8mb4 support
        }
    }
}


# Email settings
# EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = env('EMAIL_HOST')
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')

AUTH_USER_MODEL = "users.CustomUser"

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]



SITE_ID = 1

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_ROOT = BASE_DIR / "media"

STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
    "default": {
        "BACKEND": "cloudinary_storage.storage.MediaCloudinaryStorage",
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTHENTICATION_BACKENDS = [

    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",

]

ACCOUNT_LOGIN_METHODS = {'username'}

ACCOUNT_EMAIL_VERIFICATION = 'none'

ACCOUNT_SIGNUP_FIELDS = ['email', 'username*', 'password1*', 'password2*']


PAYSTACK_SECRET_KEY= env('PAYSTACK_SECRET_KEY')

CLOUDINARY_STORAGE = {
    'CLOUD_NAME': env('CLOUDINARY_CLOUD_NAME'),
    'API_KEY': env('CLOUDINARY_API_KEY'),
    'API_SECRET': env('CLOUDINARY_API_SECRET'),
}

# Algolia Configuration
ALGOLIA = {
    'APPLICATION_ID': env('ALGOLIA_APPLICATION_ID'),
    'API_KEY': env('ALGOLIA_WRITE_API_KEY'), # Use Admin API Key for indexing
    # 'INDEX_PREFIX': 'my_app_', # Optional: prefix for your index names (e.g., my_app_Product)
    # 'AUTO_INDEXING': True, # Default is True, automatically syncs model changes
}